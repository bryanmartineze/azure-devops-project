# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- Dev

pool:
  vmImage: ubuntu-latest
strategy:
  matrix:
    Python38:
      python.version: '3.8'
      
steps:

# - task: UsePythonVersion@0
#   displayName: 'Use Python $(python.version)'
#   inputs:
#     versionSpec: '$(python.version)'

# #Install Python packagers
# - script: |
#      pip install wheel
#      pip install twine
#   displayName: 'Install python packagers'

# #Build Package DadJokes
# - script: |
#      cd microservices
#      python DadJokes/setup.py bdist_wheel
#   displayName: "Build DadJokes Artifact"
  
# #Build Package Kanye
# - script: |
#      cd microservices
#      python Kanye/setup.py bdist_wheel
#   displayName: 'Build Kanye Artifact'
  
# #Upload python packages
# - task: TwineAuthenticate@1
#   displayName: Twine Authenticate
#   inputs:
#     artifactFeed: 'python_feed'       
    
# - script: |
#      cd microservices
#      python -m twine upload -r 'python_feed' --config-file $(PYPIRC_PATH) dist/*.whl
#   displayName: 'Upload python Artifacts'

# #Build Package MyJokes
# - task: NodeTool@0
#   inputs:
#     versionSpec: '16.x'
#   displayName: 'Install Node.js'

# - script: |
#     cd microservices/MyJokes
#     npm install
#     npm run build
#   displayName: 'build nodejs'
  
#upload MyJokes Packages
# - task: Npm@1
#   inputs:
#     command: publish
#     workingDir: $(Build.SourcesDirectory)/microservices/MyJokes
#     publishRegistry: useFeed
#     publishFeed: 'nodejs_feed'
#   displayName: 'Upload nodejs package'
#   continueOnError: true
  
# #Build Package frontend
# - task: NodeTool@0
#   inputs:
#     versionSpec: '16.x'
#   displayName: 'Install Node.js'

# - script: |
#     cd microservices/frontend
#     npm install
#     npm run build
#   displayName: 'build react'
  
#upload frontend Packages
# - task: Npm@1
#   inputs:
#     command: publish
#     workingDir: $(Build.SourcesDirectory)/microservices/frontend
#     publishRegistry: useFeed
#     publishFeed: 'react_feed'
#   displayName: 'Upload react package'
#   continueOnError: true
- script: |
    az login --service-principal -u $(AZURE_SERVICE_PRINCIPAL_ID) -p $(AZURE_SERVICE_PRINCIPAL_KEY) --tenant $(AZURE_TENANT_ID)
    az group create -l eastus -g 'azure-devops-rg'
    cd iac/
    az deployment group create -f 'container-registry.bicep' -g azure-devops-rg
    
  displayName: 'Create Azure Container Regitry'

- task: DockerInstaller@0
  displayName: 'Install Docker'
  inputs:
    dockerVersion: 17.09.0-ce
    releaseType: stable

# - task: Docker@2
#   inputs:
#     containerRegistry: 'azure-devops-project-sc'
#     command: 'login'

- script: |
    cd microservices/DadJokes
    docker build -t dadjokes:latest .
    acrName=$(az deployment group list --resource-group azure-devops-rg | jq -r '.[0].properties.outputResources[0].id' | xargs basename)
    docker tag dadjokes:latest $(acrName).azurecr.io/dadjokes:latest
    docker login $(acrName).azurecr.io -u $(AZURE_SERVICE_PRINCIPAL_ID) -p $(AZURE_SERVICE_PRINCIPAL_KEY)
    docker push $(acrName).azurecr.io/dadjokes:latest
  displayName: 'Build and push DadJokes to ACR'

- script: |
    cd microservices/frontend
    docker build -t frontend:latest .
    acrName=$(az deployment group list --resource-group azure-devops-rg | jq -r '.[0].properties.outputResources[0].id' | xargs basename)
    docker tag frontend:latest $(acrName).azurecr.io/frontend:latest
    docker login $(acrName).azurecr.io -u $(AZURE_SERVICE_PRINCIPAL_ID) -p $(AZURE_SERVICE_PRINCIPAL_KEY)
    docker push $(acrName).azurecr.io/frontend:latest
  displayName: 'Build and push frontend to ACR'

- script: |
    cd microservices/Kanye
    docker build -t kanye:latest .
    acrName=$(az deployment group list --resource-group azure-devops-rg | jq -r '.[0].properties.outputResources[0].id' | xargs basename)
    docker tag kanye:latest $(acrName).azurecr.io/kanye:latest
    docker login $(acrName).azurecr.io -u $(AZURE_SERVICE_PRINCIPAL_ID) -p $(AZURE_SERVICE_PRINCIPAL_KEY)
    docker push $(acrName).azurecr.io/kanye:latest
displayName: 'Build and push Kanye to ACR'

- script: |
    cd microservices/MyJokes
    docker build -t myjokes:latest .
    acrName=$(az deployment group list --resource-group azure-devops-rg | jq -r '.[0].properties.outputResources[0].id' | xargs basename)
    docker tag myjokes:latest $(acrName).azurecr.io/myjokes:latest
    docker login $(acrName).azurecr.io -u $(AZURE_SERVICE_PRINCIPAL_ID) -p $(AZURE_SERVICE_PRINCIPAL_KEY)
    docker push $(acrName).azurecr.io/myjokes:latest
displayName: 'Build and push MyJokes to ACR'

# insert your own steps here
- template: teamsnotification.yaml
  parameters:
    message: |
      ✔ Pipeline was run successfully!
      [Results]($(System.TeamFoundationCollectionUri)$(System.TeamProject)/_build/results?buildId=$(Build.BuildId))        
    webhookUrl: $(WEBHOOK_URL)
    condition: succeeded()
    displayName: Send success message
- template: teamsnotification.yaml
  parameters:
    message: | 
      ❗ Pipeline failed!
      [Results]($(System.TeamFoundationCollectionUri)$(System.TeamProject)/_build/results?buildId=$(Build.BuildId))
    webhookUrl: $(WEBHOOK_URL)
    condition: failed()
    displayName: Send failure message